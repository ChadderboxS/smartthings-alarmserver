/**
* App Endpoint API Access Example
*
* Author: SmartThings
*/

// Automatically generated. Make future change here.
definition(
name: "Alarm Integration",
namespace: "",
author: "ethomasii@gmail.com",
description: "Alarm Integration",
category: "My Apps",
iconUrl: "https://dl.dropboxusercontent.com/u/2760581/dscpanel_small.png",
iconX2Url: "https://dl.dropboxusercontent.com/u/2760581/dscpanel_large.png",
oauth: true
)

preferences {
section("Allow Endpoint to Control These Things...") {
input "switches", "capability.switch", title: "Which Switches?", multiple: true
//input "locks", "capability.lock", title: "Which Locks?", multiple: true
//input "cameras", "capability.imageCapture", title: "Which cameras?", multiple: true
//input "motionsensors", "capability.motionSensor", title: "Which motion sensors?", multiple: true
input "contactsensors", "capability.contactSensor", title: "Which contact sensors?", multiple: true
}
}

mappings {

path("/switches") {
	action: [
		GET: "listSwitches"
	]
}
path("/switches/:id") {
	action: [
		GET: "showSwitch"
	]
}
path("/switches/:id/:command") {
	action: [
		GET: "updateSwitch"
	]
}
path("/cameras") {
	action: [
		GET: "listCameras"
	]
}
path("/cameras/:id") {
	action: [
		GET: "showCamera"
	]
}
path("/cameras/:id/:command") {
	action: [
		GET: "updateCamera"
	]
}	
path("/locks") {
	action: [
		GET: "listLocks"
	]
}
path("/locks/:id") {
	action: [
		GET: "showLock"
	]
}
path("/locks/:id/:command") {
	action: [
		GET: "updateLock"
	]
}   
path("/motionsensors/:id/:command") {
	action: [
		GET: "updateMotionSensor"
	]
}    
path("/motionsensors") {
	action: [
		GET: "listMotionSensors"
	]
}
path("/motionsensors/:id") {
	action: [
		GET: "showMotionSensor"
	]
}

path("/contactsensors/:id/:command") {
	action: [
		GET: "updateContactSensor"
	]
}    
path("/contactsensors") {
	action: [
		GET: "listContactSensors"
	]
}
path("/contactsensors/:id") {
	action: [
		GET: "showContactSensor"
	]
}
}

def installed() {}

def updated() {}

//switches
def listSwitches() {
switches.collect{device(it,"switch")}
}

def showSwitch() {
show(switches, "switch")
}
void updateSwitch() {
update(switches)
}

//cameras
def listCameras() {
cameras.collect{device(it,"camera")}
}

def showCamera() {
show(cameras, "cameras")
}
void updateCamera() {
update(cameras)
}

//locks
def listLocks() {
locks.collect{device(it,"lock")}
}

def showLock() {
show(locks, "lock")
}

void updateLock() {
update(locks)
}

//motion sensors
def listMotionSensors() {
motionsensors.collect{device(it,"motionSensor")}
}

def showMotionSensor() {
show(motionsensors, "motionSensor")
}

void updateMotionSensor() {
update(motionsensors)
}

//contact sensors
def listContactSensors() {
contactsensors.collect{device(it,"contactSensor")}
}

def showContactSensor() {
show(contactsensors, "contactSensor")
}

void updateContactSensor() {
update(contactsensors)
}

def deviceHandler(evt) {}

private void update(devices) {
log.debug "update, request: params: ${params}, devices: $devices.id"

//def command = request.JSON?.command
def command = params.command
//let's create a toggle option here
if (command) 
{
	def device = devices.find { it.id == params.id }
	if (!device) {
		httpError(404, "Device not found")
	} else {
    	if(command == "toggle")
   		{
        	if(device.currentValue('switch') == "on")
              device.off();
            else
              device.on();
   		}
   		else
   		{
			device."$command"()
        }
	}
}
}

private show(devices, type) {
def device = devices.find { it.id == params.id }
if (!device) {
httpError(404, "Device not found")
}
else {
def attributeName = type == "motionSensor" ? "motion" : type
def s = device.currentState(attributeName)
[id: device.id, label: device.displayName, value: s?.value, unitTime: s?.date?.time, type: type]
}
}

private device(it, type) {
it ? [id: it.id, label: it.label, type: type] : null
}
